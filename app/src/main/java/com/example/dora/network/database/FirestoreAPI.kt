package com.example.dora.network.database

import com.example.dora.network.NetworkRequest
import com.example.dora.network.NetworkResponse
import com.example.dora.network.api.RemoteDatabaseAPI
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase

class FirestoreAPI(private val db: FirebaseFirestore = Firebase.firestore) :
    RemoteDatabaseAPI<FirestoreRequest, FirestoreResponse, Throwable> {
    override fun insert(
        request: NetworkRequest<FirestoreRequest>,
        autogenerateDocumentId: Boolean
    ): NetworkResponse<FirestoreResponse, Throwable> {
        return when (autogenerateDocumentId) {
            true -> {
                val queryResult = db.collection(request.body.collection).add(request.body.data!!)
                NetworkResponse(FirestoreResponse(insertTask = queryResult), null)
            }
            false -> {
                val queryResult =
                    db.collection(request.body.collection)
                        .document(request.body.document!!)
                        .set(request.body.data!!)
                NetworkResponse(FirestoreResponse(updateTask = queryResult), null)
            }
        }
    }

    override fun update(
        request: NetworkRequest<FirestoreRequest>
    ): NetworkResponse<FirestoreResponse, Throwable> {
        val queryResult =
            db.collection(request.body.collection)
                .document(request.body.document!!)
                .update(request.body.updates!!)
        return NetworkResponse(FirestoreResponse(updateTask = queryResult), null)
    }

    override fun delete(
        request: NetworkRequest<FirestoreRequest>
    ): NetworkResponse<FirestoreResponse, Throwable> {
        val queryResult =
            db.collection(request.body.collection).document(request.body.document!!).delete()
        return NetworkResponse(FirestoreResponse(deleteTask = queryResult), null)
    }

    override fun single(
        request: NetworkRequest<FirestoreRequest>
    ): NetworkResponse<FirestoreResponse, Throwable> {
        val queryResult =
            db.collection(request.body.collection).document(request.body.document!!).get()
        return NetworkResponse(FirestoreResponse(singleTask = queryResult), null)
    }

    override fun find(
        request: NetworkRequest<FirestoreRequest>
    ): NetworkResponse<FirestoreResponse, Throwable> {
        val queryResult = db.collection(request.body.collection).where(request.body.where!!).get()
        return NetworkResponse(FirestoreResponse(findTask = queryResult), null)
    }
}
